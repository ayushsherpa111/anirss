// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package torrent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TorrentSvcClient is the client API for TorrentSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TorrentSvcClient interface {
	// Check DB for all pending/new downloads.
	CheckAllPendingDownloads(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Query for downloading a specific anime/season/episode using params
	DownloadAnime(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*DownloadResult, error)
}

type torrentSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewTorrentSvcClient(cc grpc.ClientConnInterface) TorrentSvcClient {
	return &torrentSvcClient{cc}
}

func (c *torrentSvcClient) CheckAllPendingDownloads(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/anirss.torrent.TorrentSvc/CheckAllPendingDownloads", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *torrentSvcClient) DownloadAnime(ctx context.Context, in *QueryParams, opts ...grpc.CallOption) (*DownloadResult, error) {
	out := new(DownloadResult)
	err := c.cc.Invoke(ctx, "/anirss.torrent.TorrentSvc/DownloadAnime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TorrentSvcServer is the server API for TorrentSvc service.
// All implementations must embed UnimplementedTorrentSvcServer
// for forward compatibility
type TorrentSvcServer interface {
	// Check DB for all pending/new downloads.
	CheckAllPendingDownloads(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Query for downloading a specific anime/season/episode using params
	DownloadAnime(context.Context, *QueryParams) (*DownloadResult, error)
	mustEmbedUnimplementedTorrentSvcServer()
}

// UnimplementedTorrentSvcServer must be embedded to have forward compatible implementations.
type UnimplementedTorrentSvcServer struct {
}

func (UnimplementedTorrentSvcServer) CheckAllPendingDownloads(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAllPendingDownloads not implemented")
}
func (UnimplementedTorrentSvcServer) DownloadAnime(context.Context, *QueryParams) (*DownloadResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAnime not implemented")
}
func (UnimplementedTorrentSvcServer) mustEmbedUnimplementedTorrentSvcServer() {}

// UnsafeTorrentSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TorrentSvcServer will
// result in compilation errors.
type UnsafeTorrentSvcServer interface {
	mustEmbedUnimplementedTorrentSvcServer()
}

func RegisterTorrentSvcServer(s grpc.ServiceRegistrar, srv TorrentSvcServer) {
	s.RegisterService(&TorrentSvc_ServiceDesc, srv)
}

func _TorrentSvc_CheckAllPendingDownloads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentSvcServer).CheckAllPendingDownloads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anirss.torrent.TorrentSvc/CheckAllPendingDownloads",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentSvcServer).CheckAllPendingDownloads(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TorrentSvc_DownloadAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TorrentSvcServer).DownloadAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anirss.torrent.TorrentSvc/DownloadAnime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TorrentSvcServer).DownloadAnime(ctx, req.(*QueryParams))
	}
	return interceptor(ctx, in, info, handler)
}

// TorrentSvc_ServiceDesc is the grpc.ServiceDesc for TorrentSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TorrentSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anirss.torrent.TorrentSvc",
	HandlerType: (*TorrentSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckAllPendingDownloads",
			Handler:    _TorrentSvc_CheckAllPendingDownloads_Handler,
		},
		{
			MethodName: "DownloadAnime",
			Handler:    _TorrentSvc_DownloadAnime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/torrent.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package dbservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AniDbSvcClient is the client API for AniDbSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AniDbSvcClient interface {
	AddAnimeById(ctx context.Context, in *AniParams, opts ...grpc.CallOption) (*Result, error)
	AddAnimeByName(ctx context.Context, in *AniParams, opts ...grpc.CallOption) (*Result, error)
	ForceUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error)
	ForceUpdateAnime(ctx context.Context, in *AniParams, opts ...grpc.CallOption) (*Result, error)
}

type aniDbSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewAniDbSvcClient(cc grpc.ClientConnInterface) AniDbSvcClient {
	return &aniDbSvcClient{cc}
}

func (c *aniDbSvcClient) AddAnimeById(ctx context.Context, in *AniParams, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/anirss.anidb.AniDbSvc/AddAnimeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aniDbSvcClient) AddAnimeByName(ctx context.Context, in *AniParams, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/anirss.anidb.AniDbSvc/AddAnimeByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aniDbSvcClient) ForceUpdate(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/anirss.anidb.AniDbSvc/ForceUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aniDbSvcClient) ForceUpdateAnime(ctx context.Context, in *AniParams, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/anirss.anidb.AniDbSvc/ForceUpdateAnime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AniDbSvcServer is the server API for AniDbSvc service.
// All implementations must embed UnimplementedAniDbSvcServer
// for forward compatibility
type AniDbSvcServer interface {
	AddAnimeById(context.Context, *AniParams) (*Result, error)
	AddAnimeByName(context.Context, *AniParams) (*Result, error)
	ForceUpdate(context.Context, *emptypb.Empty) (*Result, error)
	ForceUpdateAnime(context.Context, *AniParams) (*Result, error)
	mustEmbedUnimplementedAniDbSvcServer()
}

// UnimplementedAniDbSvcServer must be embedded to have forward compatible implementations.
type UnimplementedAniDbSvcServer struct {
}

func (UnimplementedAniDbSvcServer) AddAnimeById(context.Context, *AniParams) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnimeById not implemented")
}
func (UnimplementedAniDbSvcServer) AddAnimeByName(context.Context, *AniParams) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAnimeByName not implemented")
}
func (UnimplementedAniDbSvcServer) ForceUpdate(context.Context, *emptypb.Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceUpdate not implemented")
}
func (UnimplementedAniDbSvcServer) ForceUpdateAnime(context.Context, *AniParams) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceUpdateAnime not implemented")
}
func (UnimplementedAniDbSvcServer) mustEmbedUnimplementedAniDbSvcServer() {}

// UnsafeAniDbSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AniDbSvcServer will
// result in compilation errors.
type UnsafeAniDbSvcServer interface {
	mustEmbedUnimplementedAniDbSvcServer()
}

func RegisterAniDbSvcServer(s grpc.ServiceRegistrar, srv AniDbSvcServer) {
	s.RegisterService(&AniDbSvc_ServiceDesc, srv)
}

func _AniDbSvc_AddAnimeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AniParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AniDbSvcServer).AddAnimeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anirss.anidb.AniDbSvc/AddAnimeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AniDbSvcServer).AddAnimeById(ctx, req.(*AniParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AniDbSvc_AddAnimeByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AniParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AniDbSvcServer).AddAnimeByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anirss.anidb.AniDbSvc/AddAnimeByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AniDbSvcServer).AddAnimeByName(ctx, req.(*AniParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _AniDbSvc_ForceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AniDbSvcServer).ForceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anirss.anidb.AniDbSvc/ForceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AniDbSvcServer).ForceUpdate(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AniDbSvc_ForceUpdateAnime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AniParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AniDbSvcServer).ForceUpdateAnime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anirss.anidb.AniDbSvc/ForceUpdateAnime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AniDbSvcServer).ForceUpdateAnime(ctx, req.(*AniParams))
	}
	return interceptor(ctx, in, info, handler)
}

// AniDbSvc_ServiceDesc is the grpc.ServiceDesc for AniDbSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AniDbSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "anirss.anidb.AniDbSvc",
	HandlerType: (*AniDbSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAnimeById",
			Handler:    _AniDbSvc_AddAnimeById_Handler,
		},
		{
			MethodName: "AddAnimeByName",
			Handler:    _AniDbSvc_AddAnimeByName_Handler,
		},
		{
			MethodName: "ForceUpdate",
			Handler:    _AniDbSvc_ForceUpdate_Handler,
		},
		{
			MethodName: "ForceUpdateAnime",
			Handler:    _AniDbSvc_ForceUpdateAnime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/anidb.proto",
}
